# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  buildAndDeploy:
    environment: production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      
    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.x'
    
    - name: Make envfile
      uses: SpicyPizza/create-envfile@v1
      with:
        envkey_SESSION_SECRET_KEY: ${{ secrets.SESSION_SECRET_KEY }}
        envkey_SMTP_HOST: ${{ secrets.SMTP_HOST }}
        envkey_SMTP_PORT: ${{ secrets.SMTP_PORT }}
        envkey_SMTP_USER: ${{ secrets.SMTP_USER }}
        envkey_SMTP_FROM: ${{ secrets.SMTP_FROM }}
        envkey_SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        envkey_NEXT_PUBLIC_FRONTEND_URL: ${{ secrets.NEXT_PUBLIC_FRONTEND_URL }}
        envkey_NEXT_PUBLIC_GA_TRACKING_ID: ${{ secrets.NEXT_PUBLIC_GA_TRACKING_ID }}
        envkey_NEXT_PUBLIC_LYDIA_API_VENDOR_TOKEN: ${{ secrets.NEXT_PUBLIC_LYDIA_API_VENDOR_TOKEN }}
        envkey_NEXT_PUBLIC_LYDIA_API_URL: ${{ secrets.NEXT_PUBLIC_LYDIA_API_URL }}
        envkey_LYDIA_API_VENDOR_ID: ${{ secrets.LYDIA_API_VENDOR_ID }}
        envkey_DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    
    - name: Install npm dependencies
      run: npm install --progress=false
    
    - name: Run build task
      run: npm run build --if-present
    
    - name: Install Open VPN
      run: sudo apt-get install openvpn
    
    - name: Connect VPN
      uses: golfzaptw/action-connect-ovpn@master
      id: connect_vpn
      with:
        PING_URL: '127.0.0.1'
        FILE_OVPN: '.github/vpn/config.ovpn'
        SECRET: ${{ secrets.SECRET_USERNAME_PASSWORD }}
        TLS_KEY: ${{ secrets.TLS_KEY }}
      env:
        CA_CRT: ${{ secrets.CA_CRT}}
        USER_CRT: ${{ secrets.USER_CRT }}
        USER_KEY: ${{ secrets.USER_KEY }}
    
    - name: Check Connect VPN
      run: echo ${{ steps.connect_vpn.outputs.STATUS }}
    
    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@v2.1.5
      env:
          ARGS: "-rltgoDzvO --delete --rsync-path=\"sudo rsync\""
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
    
    - name: Restart server
      uses: cd bde-isima && garygrossgarten/github-action-ssh@release
      with:
        command: docker-compose restart
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        privateKey: ${{ secrets.SERVER_SSH_KEY}}
    
    - name: kill vpn
      if: always()
      run: sudo killall openvpn
